
import PySimpleGUI as sg

sg.theme('Dark Green 2')

layout = [  [sg.Text('My Window')],
            [sg.Input(key='-IN1-')],
            [sg.Input(key='-IN2-')],
            [sg.Button('Go'), sg.Button('Unbind'),sg.Button('Exit')]
              ]

window = sg.Window('Window Title', layout, finalize=True)

window.bind("<Button-1>", 'Window Click')
window['Go'].bind("<Button-3>", ' +RIGHT CLICK+')
# window['-IN2-'].bind("<FocusIn>", ' +FOCUS+')

while True:             # Event Loop
    event, values = window.read()
    print(event, values)
    if event in (sg.WIN_CLOSED, 'Exit'):
        break
    if event == 'Unbind':
        window['Go'].unbind('<Button-3>')

window.close()


# import PySimpleGUI as sg
# import time

# """
#  Timer Desktop Widget Creates a floating timer that is always on top of other windows You move it by grabbing anywhere on the window Good example of how to do a non-blocking, polling program using PySimpleGUI 
#  Something like this can be used to poll hardware when running on a Pi
#  While the timer ticks are being generated by PySimpleGUI's "timeout" mechanism, the actual value
#   of the timer that is displayed comes from the system timer, time.time().  This guarantees an
#   accurate time value is displayed regardless of the accuracy of the PySimpleGUI timer tick. If
#   this design were not used, then the time value displayed would slowly drift by the amount of time
#   it takes to execute the PySimpleGUI read and update calls (not good!)
#     Copyright 2021 PySimpleGUI
# """


# def time_as_int():
#     return int(round(time.time() * 100))


# # ----------------  Create Form  ----------------
# sg.theme('Black')

# layout = [[sg.Text('')],
#           [sg.Text('', size=(8, 2), font=('Helvetica', 20),
#                 justification='center', key='text')],
#           [sg.Button('Pause', key='-RUN-PAUSE-', button_color=('white', '#001480')),
#            sg.Button('Reset', button_color=('white', '#007339'), key='-RESET-'),
#            sg.Exit(button_color=('white', 'firebrick4'), key='Exit')]]

# window = sg.Window('Running Timer', layout,
#                    no_titlebar=True,
#                    auto_size_buttons=False,
#                    keep_on_top=True,
#                    grab_anywhere=True,
#                    element_padding=(0, 0),
#                    finalize=True,
#                    element_justification='c',
#                    right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_EXIT)

# current_time, paused_time, paused = 0, 0, False
# start_time = time_as_int()

# while True:
#     # --------- Read and update window --------
#     if not paused:
#         event, values = window.read(timeout=10)
#         current_time = time_as_int() - start_time
#     else:
#         event, values = window.read()
#     # --------- Do Button Operations --------
#     if event in (sg.WIN_CLOSED, 'Exit'):        # ALWAYS give a way out of program
#         break
#     if event == '-RESET-':
#         paused_time = start_time = time_as_int()
#         current_time = 0
#     elif event == '-RUN-PAUSE-':
#         paused = not paused
#         if paused:
#             paused_time = time_as_int()
#         else:
#             start_time = start_time + time_as_int() - paused_time
#         # Change button's text
#         window['-RUN-PAUSE-'].update('Run' if paused else 'Pause')
#     elif event == 'Edit Me':
#         sg.execute_editor(__file__)
#     # --------- Display timer in window --------
#     window['text'].update('{:02d}:{:02d}.{:02d}'.format((current_time // 100) // 60,
#                                                         (current_time // 100) % 60,
#                                                         current_time % 100))
# window.close()




#############################################################################

# import PySimpleGUI as sg

# """
#     Demo - Element List
#     All elements shown in 1 window as simply as possible.
#     Copyright 2022 PySimpleGUI
# """


# use_custom_titlebar = True if sg.running_trinket() else False

# def make_window(theme=None):

#     NAME_SIZE = 23


#     def name(name):
#         dots = NAME_SIZE-len(name)-2
#         return sg.Text(name + ' ' + 'â€¢'*dots, size=(NAME_SIZE,1), justification='r',pad=(0,0), font='Courier 10')

#     sg.theme(theme)

#     # NOTE that we're using our own LOCAL Menu element
#     if use_custom_titlebar:
#         Menu = sg.MenubarCustom
#     else:
#         Menu = sg.Menu

#     treedata = sg.TreeData()

#     treedata.Insert("", '_A_', 'Tree Item 1', [1234], )
#     treedata.Insert("", '_B_', 'B', [])
#     treedata.Insert("_A_", '_A1_', 'Sub Item 1', ['can', 'be', 'anything'], )

#     layout_l = [
#                 [name('Text'), sg.Text('Text')],
#                 [name('Input'), sg.Input(s=15)],
#                 [name('Multiline'), sg.Multiline(s=(15,2))],
#                 [name('Output'), sg.Output(s=(15,2))],
#                 [name('Combo'), sg.Combo(sg.theme_list(), default_value=sg.theme(), s=(15,22), enable_events=True, readonly=True, k='-COMBO-')],
#                 [name('OptionMenu'), sg.OptionMenu(['OptionMenu',],s=(15,2))],
#                 [name('Checkbox'), sg.Checkbox('Checkbox')],
#                 [name('Radio'), sg.Radio('Radio', 1)],
#                 [name('Spin'), sg.Spin(['Spin',], s=(15,2))],
#                 [name('Button'), sg.Button('Button')],
#                 [name('ButtonMenu'), sg.ButtonMenu('ButtonMenu', sg.MENU_RIGHT_CLICK_EDITME_EXIT)],
#                 [name('Slider'), sg.Slider((0,10), orientation='h', s=(10,15))],
#                 [name('Listbox'), sg.Listbox(['Listbox', 'Listbox 2'], no_scrollbar=True,  s=(15,2))],
#                 [name('Image'), sg.Image(sg.EMOJI_BASE64_HAPPY_THUMBS_UP)],
#                 [name('Graph'), sg.Graph((125, 50), (0,0), (125,50), k='-GRAPH-')]  ]

#     layout_r  = [[name('Canvas'), sg.Canvas(background_color=sg.theme_button_color()[1], size=(125,40))],
#                 [name('ProgressBar'), sg.ProgressBar(100, orientation='h', s=(10,20), k='-PBAR-')],
#                 [name('Table'), sg.Table([[1,2,3], [4,5,6]], ['Col 1','Col 2','Col 3'], num_rows=2)],
#                 [name('Tree'), sg.Tree(treedata, ['Heading',], num_rows=3)],
#                 [name('Horizontal Separator'), sg.HSep()],
#                 [name('Vertical Separator'), sg.VSep()],
#                 [name('Frame'), sg.Frame('Frame', [[sg.T(s=15)]])],
#                 [name('Column'), sg.Column([[sg.T(s=15)]])],
#                 [name('Tab, TabGroup'), sg.TabGroup([[sg.Tab('Tab1',[[sg.T(s=(15,2))]]), sg.Tab('Tab2', [[]])]])],
#                 [name('Pane'), sg.Pane([sg.Col([[sg.T('Pane 1')]]), sg.Col([[sg.T('Pane 2')]])])],
#                 [name('Push'), sg.Push(), sg.T('Pushed over')],
#                 [name('VPush'), sg.VPush()],
#                 [name('Sizer'), sg.Sizer(1,1)],
#                 [name('StatusBar'), sg.StatusBar('StatusBar')],
#                 [name('Sizegrip'), sg.Sizegrip()]  ]

#     # Note - LOCAL Menu element is used (see about for how that's defined)
#     layout = [[Menu([['File', ['Exit']], ['Edit', ['Edit Me', ]]],  k='-CUST MENUBAR-',p=0)],
#               [sg.T('PySimpleGUI Elements - Use Combo to Change Themes', font='_ 14', justification='c', expand_x=True)],
#               [sg.Checkbox('Use Custom Titlebar & Menubar', use_custom_titlebar, enable_events=True, k='-USE CUSTOM TITLEBAR-', p=0)],
#               [sg.Col(layout_l, p=0), sg.Col(layout_r, p=0)]]

#     window = sg.Window('The PySimpleGUI Element List', layout, finalize=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, keep_on_top=True, use_custom_titlebar=use_custom_titlebar)

#     window['-PBAR-'].update(30)                                                     # Show 30% complete on ProgressBar
#     window['-GRAPH-'].draw_image(data=sg.EMOJI_BASE64_HAPPY_JOY, location=(0,50))   # Draw something in the Graph Element

#     return window


# window = make_window()

# while True:
#     event, values = window.read()
#     # sg.Print(event, values)
#     if event == sg.WIN_CLOSED or event == 'Exit':
#         break

#     if values['-COMBO-'] != sg.theme():
#         sg.theme(values['-COMBO-'])
#         window.close()
#         window = make_window()
#     if event == '-USE CUSTOM TITLEBAR-':
#         use_custom_titlebar = values['-USE CUSTOM TITLEBAR-']
#         sg.set_options(use_custom_titlebar=use_custom_titlebar)
#         window.close()
#         window = make_window()
#     if event == 'Edit Me':
#         sg.execute_editor(__file__)
#     elif event == 'Version':
#         sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, non_blocking=True)
# window.close()